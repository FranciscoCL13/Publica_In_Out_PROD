package com.dev.publica_in_out;

/**
 * This class was automatically generated by the data modeler tool.
 */

import org.jbpm.document.Document;
import org.kie.api.task.TaskEvent;
import org.kie.api.task.model.Task;
import org.kie.api.task.model.TaskData;
import org.kie.api.task.TaskLifeCycleEventListener;
import org.json.JSONObject;
import org.json.JSONArray;

import java.util.concurrent.CompletableFuture;
import org.jbpm.document.DocumentCollection;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class RegistroTareaListener implements TaskLifeCycleEventListener {

    private static final String API_URL = "http://172.25.30.98:8082/documentos";

    // Credenciales actualizadas para la base de datos PostgreSQL
    private static final String DB_URL = "jdbc:postgresql://172.25.30.1:5435/pviamaya";
    private static final String DB_USER = "pviamayausr";
    private static final String DB_PASSWORD = "pS7x4V51Yta4A6AQ";

    @Override
    public void beforeTaskActivatedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskClaimedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskSkippedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskStartedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskStoppedEvent(TaskEvent event) { }

    @Override
    public void beforeTaskCompletedEvent(TaskEvent event) {
        Task task = event.getTask();
        long taskId = task.getId();
        long processInstanceId = task.getTaskData().getProcessInstanceId();
        String taskName = task.getName();

        System.out.println("üîç [Depuraci√≥n] Antes de completar tarea - TaskID: " + taskId + ", ProcessInstanceId: " + processInstanceId + ", Nombre: " + taskName);

        // Validar s√≥lo si el nombre de la tarea contiene "FIRMA" (case-insensitive)
        if (taskName.toUpperCase().contains("FIRMA")) {
            try {
                Class.forName("org.postgresql.Driver");
                try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                    String query = "SELECT COUNT(*) FROM desarrollo.firmas WHERE task_id = ?";
                    try (PreparedStatement stmt = conn.prepareStatement(query)) {
                        stmt.setLong(1, taskId);
                        try (ResultSet rs = stmt.executeQuery()) {
                            if (rs.next()) {
                                int count = rs.getInt(1);
                                if (count == 0) {
                                    System.out.println("‚õî No se encontr√≥ firma para taskId: " + taskId);
                                    throw new RuntimeException("‚õî No se permite completar esta tarea sin firma digital.");
                                } else {
                                    System.out.println("‚úÖ Firma verificada para taskId: " + taskId);
                                }
                            }
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw new RuntimeException("‚õî Error validando firma digital: " + e.getMessage(), e);
            }
        }
    }

    @Override
    public void beforeTaskFailedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskAddedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskExitedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskReleasedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskResumedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskSuspendedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskForwardedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskDelegatedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskNominatedEvent(TaskEvent event) { }
    @Override
    public void afterTaskActivatedEvent(TaskEvent event) { }
    @Override
    public void afterTaskClaimedEvent(TaskEvent event) { }
    @Override
    public void afterTaskSkippedEvent(TaskEvent event) { }
    @Override
    public void afterTaskStartedEvent(TaskEvent event) { }
    @Override
    public void afterTaskStoppedEvent(TaskEvent event) { }

    @Override
    public void afterTaskCompletedEvent(TaskEvent e) {
        try {
            List<String> documentosIds = new ArrayList<>();
            Map<String, Object> vars = e.getTask().getTaskData().getTaskOutputVariables();

            vars.forEach((k, v) -> {
                if (v instanceof Document) {
                    Document d = (Document) v;
                    documentosIds.add(d.getIdentifier());
                } else if (v instanceof DocumentCollection) {
                    DocumentCollection coll = (DocumentCollection) v;
                    coll.getDocuments().forEach(doc -> {
                        Document d = (Document) doc;
                        documentosIds.add(d.getIdentifier());
                    });
                }
            });

            if (!documentosIds.isEmpty()) {
                enviarIds(documentosIds);
            }

        } catch (Exception ex) {
            System.err.println("‚ùå Error en afterTaskCompletedEvent: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void enviarIds(List<String> uuids) {
        try {
            JSONArray jsonArray = new JSONArray();
            uuids.forEach(jsonArray::put);
            JSONObject payload = new JSONObject().put("documentIds", jsonArray);

            PeticionHTTP.ejecuta(API_URL, payload)
                .whenComplete((resp, err) -> {
                    if (err != null) err.printStackTrace();
                    else System.out.println("‚úÖ Respuesta del backend: " + resp);
                });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void afterTaskFailedEvent(TaskEvent event) { }
    @Override
    public void afterTaskAddedEvent(TaskEvent event) { }
    @Override
    public void afterTaskExitedEvent(TaskEvent event) { }
    @Override
    public void afterTaskReleasedEvent(TaskEvent event) { }
    @Override
    public void afterTaskResumedEvent(TaskEvent event) { }
    @Override
    public void afterTaskSuspendedEvent(TaskEvent event) { }
    @Override
    public void afterTaskForwardedEvent(TaskEvent event) { }
    @Override
    public void afterTaskDelegatedEvent(TaskEvent event) { }
    @Override
    public void afterTaskNominatedEvent(TaskEvent event) { }
}
